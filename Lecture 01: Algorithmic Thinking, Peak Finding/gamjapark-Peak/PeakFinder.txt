
//Peak Finder

//One dimentional   -> problem
typedef int type;
type One_dimentional(type A [], int len){
	if( len == 0 ) return;
	
	if(A[0] > A[1]) return A[0];
	for(int i = 1; i < len - 1; i++)
		if( A[i] > A[i - 1] && A[i] > A[i + 1] ) return A[i];
	if(A[len - 1] > A[len - 2]) return A[len - 1];
}

//Straightforword Algorithm   ->Good
typedef int type;
type Straightforword_Algorithm(type A [], int start, int end){
	if( (start - end) == 0 ) return;

	int mid = (start + end)/2;

	if( A[mid] < A[mid - 1] ) return Straightforword_Algorithm( A, start, mid -1);
	else if( A[mid] < A[mid + 1] ) return Straightforword_Algorithm( A, mid + 1, end);
	else return A[mid];
}

//Two dimentional   ->Good
typedef int type;
type Two_dimentional(type A [][], int col, int row){

	int j = col / 2 - 1;
	while(1){
		int max = 0;	
		for( int i = 1; i < row; i++)
			if(A[i][j] > A[max][j]) max = i;
		if(j > 0 && A[max][j - 1] > A[max][j] ) --j;
		else if(j < col - 1 && A[max][j + 1] > A[max][j]) ++j;
		else return A[max][j];

	}
}




































		